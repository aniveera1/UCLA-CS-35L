Homework
Exercise 1.1
1. e m a c s SP e x e r c 1 . h t m l Enter
2. M-s w P U B L I C Enter
3. M-s w L a b o r a t o r y Enter M-b
4. M-s w s e l f - r e f e r e n t i a l Enter M-b M-b
5. M-s w a r r o w Enter M-b
6. C-e
7. C-a
10. C-x C-c

Exercise 1.2
1. e m a c s SP e x e r c 2 . h t m l Enter
2. M-g g 1 8 Enter C-k
3. M-s w D E L E T E M E SP D E L E T E M E SP D E L E T E M E Enter C-a C-k
4. M-s w h t t p s Enter M-s w h t t p s Enter C-a C-k C-n C-k C-n C-k
5. C-s < ! - Enter M-b M-f C-d C-d C-d C-d C-d C-d C-d C-s < ! Enter C-a C-k
6. C-x C-c

Exercise 1.3
1. e m a c s SP e x e r c 3 . h t m l Enter
2. C-s A s s i g n m e n t 1 Enter Backspace 3 7 C-s A s s i g n m e n t 1 Enter
Backspace 3 7
3. C-r U T F - S Enter C-f C-f C-f C-f Backspace Backspace Backspace Backspace
S - A S C I I
4. C-s < / o l > Enter C-a Enter
5. C-x C-c y

Exercise 1.4
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l
Enter
2. e m a c s SP e x e r 4 . h t m l Enter
3. M-> C-r C-SP C-e M-w C-r < / Enter C-r < / h t m l > Enter C-e Enter C-y
4. M-> C-r < ! - - SP Y Enter C-f C-SP DOWN DOWN C-e M-w C-r < h 2 Enter C-r
< h 2 > S Enter DOWN DOWN C-y DOWN DOWN DOWN Backspace Backspace M->
C-r - < ! - - SP D Enter C-f C-SP C-e M-w C-r < h Enter C-r < h 2 > H Enter
DOWN DOWN C-y M-> C-r - < ! - - SP d i Enter C-f C-SP DOWN C-e M-w C-r < h 2
Enter C-r < h 2 > L Enter DOWN DOWN C-y
5. C-s - - - Enter C-p C-SP M-> Backspace
6. C-x-u
7. < ! - - M-> - - >
8. M-< M-x r e p l a c e - s t r i n g Enter < o l > Enter < O l > Enter
9. C-x C-c

Exercise 1.5
1. e m a c s Enter M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f h e l l o . c Enter (Copy source code)
3. M-x c o m p i l e Backspace Backspace Backspace Backspace Backspace Backspace
Backspace Backspace g c c h e l l o . c Enter
4. C-x b h e l l o . o u t Enter C-u M-! . / a . o u t Enter
5. C-SP M-> M-w C-x C-f k e y 1 . t x t  M-> M-x c l i p b o a r d - y a n k
Enter
#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6
1. e m a c s C-x b Enter
2. ( r a n d o m ) C-j
3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) )
C-j
4. ( SP * SP x SP y ) C-j
The product is -1344684668030858202, which is incorrect since multiplying two
positive numbers should not equal a negative number.
5. M-: ( * SP x SP x ) Enter
The result is still -1344684668030858202, however, the result also includes
the octodecimal and hexidecimal notation of the number.
6. The integers are not truly random in the mathematical sense because a truly
random integer would have a range of negative infinity to positive infinity, but
based on the limitations of computers it is not possible to represent numbers as
large as negative infinity or positive inifity. Thus computers must impose a
restiction on the range of possible values, which means a truly random integer
is not being picked.
7. The probability is 1/2^n where n is the number of bits in an integer. An
wrong result will occur whenever overflow happens, therefore I simply determined
the probability of overflow happening based on how many bit were in an integer.
In order to do this I determined the probability for 2 bit and 3 bit integers,
and found a general formula to extend this to n bit integers.
